<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:aht="http://ahtutils.sourceforge.net/jsf"
	xmlns:p="http://primefaces.org/ui"
	xmlns:ofx="http://www.openfuxml.org/jsf"
	xmlns:geojsf="http://geojsf.sourceforge.net/ui"
	template="/WEB-INF/templates/geojsf.xhtml">
	<ui:define name="tracking"><ui:fragment rendered="#{trackingBean.track('showcaseMapSimple')}"/></ui:define>
	<ui:define name="menu"><aht:menuUl value="#{menuBean.build('showcaseMapSimple')}" scActive="active"/></ui:define>
	<ui:define name="headline"><aht:breadcrumb value="#{menuBean.breadcrumb('showcaseMapSimple')}"/></ui:define>
	<ui:define name="content">
		<div class="row">
			<div class="span3">
				<h3>Showcase</h3>
				<div class="sidemenu">
					<aht:menuUl value="#{menuBean.sub('showcase')}" sc1="top-level"/>
				</div>
			</div>
			<div class="span9">
				<h1>map (simple)</h1>
				The bean code highly depends on the way you are defining your layer in the managed bean.
				If you want to use multiple WMS sources, the you <b>have</b> to use the
				<h:outputLink value="/tutorial/datastructure">GeoJSF Data Structure</h:outputLink>,
				for simple solutions a <i>wmsUrl</i> and a <i>List(String)</i> is sufficient.
				<ui:include src="/WEB-INF/showcase/map-simple.xhtml" />
				<p:tabView>
					<p:tab title="XHTML">
						This code fragment should render a map nearly out-of-the box. You only need to include
						the GeoJSF-library. The experimental <i>listener</i> also needs to be set, pointing to
						a method that accepts a <i>AjaxBehaviorEvent</i>. 
						<aht:highlight resource="/composition.geojsf-demo/map-simple.xhtml" from="9" to="10"/>
					</p:tab>  
					<p:tab title="Attributes">  
						<ofx:component value="#{showcaseBean.component['map']}"/>
					</p:tab>  
					
				</p:tabView>  	
			</div>
		</div>
	</ui:define>
</ui:composition>
